import{chrome}from"../../../utils/polyfill.ts";import{MV2ExclusionHandler}from"./exclusions-mv2";import{EXCLUSION_ADS,EXCLUSION_MALWARE,EXCLUSION_SCAMS}from"../app-consts";import{allResourceTypes,DYNAMIC_RULE_ADS_PRIORITY,DYNAMIC_RULE_ALL_PRIORITY,DYNAMIC_RULE_TEMPORARY_PRIORITY,DYNAMIC_RULE_MALWARE_PRIORITY,getExistingDynamicRulesByActionTypes,getExistingSessionRules,getLastDynamicRuleId,getLastSessionRuleId,mainFrameResourceType,DYNAMIC_RULE_SCAMS_PRIORITY}from"../mv3/dynamic-rule-utils";import{handleExcludedHost}from"@/app/scripts/app.js";export class MV3ExclusionHandler extends MV2ExclusionHandler{constructor(){super(),this.TEMPORARY_EXCLUSIONS={},this.loadTemporaryExclusions()}extractExclusions(i){return Array.isArray(i)?i:i.split(",")}exportExclusions(){return{}}async importExclusions(i){for(let e=0;e<Object.keys(i).length;e++){const t=Object.keys(i)[e],s=await this.exclude_mapIntsToExclusions(i[t]);await handleExcludedHost(t,s,!0,(i=>{if(i.error)throw console.error("Error adding exclusion: ",i.error),new Error("Error adding exclusion: ",i.error);console.log("Exclusion added successfully: ",i)}))}}getPriorityForExclusions(i){let e,t=DYNAMIC_RULE_ALL_PRIORITY;return i?(e=Array.isArray(i)?i:i.split(","),1==e.length&&e.includes(EXCLUSION_ADS)?t=DYNAMIC_RULE_ADS_PRIORITY:1==e.length&&e.includes(EXCLUSION_MALWARE)?t=DYNAMIC_RULE_MALWARE_PRIORITY:1==e.length&&e.includes(EXCLUSION_SCAMS)&&(t=DYNAMIC_RULE_SCAMS_PRIORITY),t):t}async exclude(i,e){let t;if(console.debug("MV3: EXCLUDE: ",i,e),t=Array.isArray(e)?await super.exclude(i,e.join(",")):await super.exclude(i,e),await this.whitelistRuleExistsForHost(i,e))return t;let s=await getLastDynamicRuleId();const o=this.getPriorityForExclusions(e);let n;n=o===DYNAMIC_RULE_MALWARE_PRIORITY?mainFrameResourceType:o===DYNAMIC_RULE_ADS_PRIORITY?allResourceTypes:o===DYNAMIC_RULE_SCAMS_PRIORITY?mainFrameResourceType:allResourceTypes;const r=[{id:s+1,priority:o,action:{type:"allow"},condition:{urlFilter:i,resourceTypes:n}},{id:s+2,priority:o,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[i],resourceTypes:n}},{id:s+3,priority:o,action:{type:"allowAllRequests"},condition:{requestDomains:[i],resourceTypes:mainFrameResourceType}}];return console.debug("MV3: ADD RULE: ",r),console.debug("MV3_updateDynamicRulesStart: ",(new Date).toString()),await chrome.declarativeNetRequest.updateDynamicRules({addRules:[...r],removeRuleIds:[]}),console.debug("MV3_updateDynamicRulesEnd: ",(new Date).toString()),t}async getExclusions(){const i=await super.getExclusions(),e=await this.getExistingWhitelistDynamicRules(),t=new Set;for(const i of e)i.condition.urlFilter&&"*"!==i.condition.urlFilter?t.add(i.condition.urlFilter):i.condition.initiatorDomains&&i.condition.initiatorDomains.length>0&&i.condition.initiatorDomains.forEach((i=>t.add(i)));const s=Array.from(t),o=Object.entries(i).filter((([i])=>s.includes(i)));return Object.fromEntries(o)}async getExclusions_getExclusionsByNames(i){0===Object.keys(i).length&&(i=[]);const e=await super.getExclusions_getExclusionsByNames(i);console.debug("HOSTNAMES: HOSTNAMES=",{hostNames:i,exclusions:e}),i=i.map((i=>i.toLowerCase()));const t=await this.getExistingWhitelistDynamicRules(),s=new Set;for(const e of t)e.condition.urlFilter&&i.includes(e.condition.urlFilter)?s.add(e.condition.urlFilter):e.condition.initiatorDomains&&e.condition.initiatorDomains.length>0&&e.condition.initiatorDomains.forEach((i=>s.add(i)));const o=Array.from(s),n=Object.entries(e).filter((([i])=>o.includes(i)));return Object.fromEntries(n)}async removeAllExclusions(){const i=await super.removeAllExclusions(),e=(await this.getExistingWhitelistDynamicRules()).map((i=>i.id));return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...e]}),i}async removeExclude(i,e,t){const s=await super.removeExclude(i,e,t);console.debug("REMOVE EXCLUSIONS RESULT_0: ",s);const o=await this.getExistingWhitelistDynamicRules(),n=[];for(const t of o)this._whitelistRuleAffectsHost(t,i)&&t.priority===this.getPriorityForExclusions(e)&&n.push(t.id);return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...n]}),s}async removeExclusions(i){const e=await super.removeExclusions(i);console.debug("REMOVE EXCLUSIONS RESULT_1: ",e);const t=await this.getExistingWhitelistDynamicRules(),s=[];for(const e of t)this._whitelistRuleAffectsHost(e,i)&&s.push(e.id);return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...s]}),e}async loadTemporaryExclusions(){const i=await getExistingSessionRules();for(const e of i)if(e.condition.initiatorDomains&&e.condition.tabIds)for(const i of e.condition.tabIds)this.TEMPORARY_EXCLUSIONS[i]=e.condition.initiatorDomains}async excludeTemporarily(i,e){if(await this.whitelistRuleExistsForHost(i))return void console.debug("EXCLUDE_TEMP: WHITELIST RULE EXISTS FOR HOST: ",{host:i});e=+e;let t=await getLastSessionRuleId();console.debug("EXCLUDE_TEMP: TABID: ",{tabId:e});const s=[{id:t+1,priority:DYNAMIC_RULE_TEMPORARY_PRIORITY,action:{type:"allow"},condition:{urlFilter:i,resourceTypes:allResourceTypes,tabIds:[e]}},{id:t+2,priority:DYNAMIC_RULE_TEMPORARY_PRIORITY,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[i],resourceTypes:allResourceTypes,tabIds:[e]}}];console.debug("MV3: ADD RULE: ",s),await chrome.declarativeNetRequest.updateSessionRules({addRules:[...s],removeRuleIds:[]}),this.TEMPORARY_EXCLUSIONS[e]?this.TEMPORARY_EXCLUSIONS[e]=Array.from(new Set([...this.TEMPORARY_EXCLUSIONS[e],i])):this.TEMPORARY_EXCLUSIONS[e]=[i]}isTemporarilyExcluded(i,e){return!!this.TEMPORARY_EXCLUSIONS[e]&&this.TEMPORARY_EXCLUSIONS[e].includes(i)}_whitelistRuleAffectsHost(i,e){return!(!i.condition.urlFilter||i.condition.urlFilter!==e)||!!(i.condition.initiatorDomains&&i.condition.initiatorDomains.length>0&&i.condition.initiatorDomains.includes(e))}async whitelistRuleExistsForHost(i,e){const t=await this.getExistingWhitelistDynamicRules();for(const s of t)if(this._whitelistRuleAffectsHost(s,i)&&s.priority===this.getPriorityForExclusions(e))return!0;return!1}async getExistingWhitelistDynamicRules(){return getExistingDynamicRulesByActionTypes(["allow"],[DYNAMIC_RULE_ADS_PRIORITY,DYNAMIC_RULE_MALWARE_PRIORITY,DYNAMIC_RULE_SCAMS_PRIORITY,DYNAMIC_RULE_ALL_PRIORITY])}}