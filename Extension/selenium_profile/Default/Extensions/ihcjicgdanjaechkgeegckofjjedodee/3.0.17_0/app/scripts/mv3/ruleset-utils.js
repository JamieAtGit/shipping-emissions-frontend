import{simpleStorageGet,simpleStorageSet}from"@/utils/storage.ts";import{chrome}from"../../../utils/polyfill.ts";import{MV3_PROTECTION_ADS,MV3_PROTECTION_MALWARE,MV3_PROTECTION_SCAMS}from"../app-consts";import{TARGET_BROWSER}from"../browser-const.js";export const defaultRulesetPatterns=["mbgc.mv3.whitelist","mbgc.mv3.ads","mbgc.mv3.malware","mbgc.mv3.easylist","mbgc.mv3.easyprivacy"];export const tryInitMV3Rulesets=async()=>{const e=await simpleStorageGet("mv3RulesetSelection")||[],t=await getAllAvailableStaticRulesets(),s=await chrome.declarativeNetRequest.getEnabledRulesets();let l=t.filter((e=>!s.includes(e)));if(l=l.filter((t=>!e.includes(t))),console.debug("TIRM: Will try to enable rulesets: ",{notEnabledRulesets:l}),l.length>0){const{failedRulesets:e,enabledRulesets:s}=await tryUpdateEnabledRulesets(l);if(e.length>0){const t=e.map((e=>e.rulesetID)),l=e.some((e=>!0===e.isBrowserError));return console.error("TIRM: Failed to enable all rulesets: ",{failedRulesetIDs:t,enabledRulesets:s}),void showRulesetErrorPage(t,l)}await simpleStorageSet({mv3RulesetSelection:t})}};export const tryInitMV3RulesetsWithSelectedIds=async e=>{const{failedRulesets:t,enabledRulesets:s}=await tryUpdateEnabledRulesets(e);return t.length>0&&console.error("TIMRWSI: Failed init selected rulesets: ",{failedRulesets:t,enabledRulesets:s}),await simpleStorageSet({mv3RulesetSelection:s}),{failedRulesets:t,enabledRulesets:s}};export const checkForAdditionalRuleSpace=async()=>{const e=await simpleStorageGet("mv3RulesetSelection")||[],t=(await getAllAvailableStaticRulesets()).filter((t=>!e.includes(t)));console.debug("CR: User Ruleset selection: ",{rulesetSelection:e,disabledRulesets:t}),await tryUpdateEnabledRulesets(t)};const tryUpdateEnabledRulesets=async e=>{if(0===e.length)return void console.debug("TUER: No rulesets to enable");let t=await chrome.declarativeNetRequest.getAvailableStaticRuleCount();console.debug("TUER: Available rule count: ",t);const s=[];let l=[];for(const t of e)try{await chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:[t]}),s.push(t),console.debug("TUER: Enabled ruleset ",t)}catch(e){console.error("TUER: Error enabling ruleset ",t,chrome.runtime.lastError,e,e.message),l.push({rulesetID:t,isBrowserError:e.message.toLowerCase().includes("internal error")})}return{enabledRulesets:s,failedRulesets:l}};export const getRuleStats=async()=>{const e=(await chrome.declarativeNetRequest.getDynamicRules()||[]).length,t=await chrome.declarativeNetRequest.getAvailableStaticRuleCount()||0,s=33e4-t,l=await chrome.declarativeNetRequest.getEnabledRulesets();return{enabledRulesets:l,dynamicRuleCount:e,staticRulesetCount:l.length,staticRuleCount:s,availableStaticRuleCount:t}};export const toggleEnabledRuleset=async(e,t)=>{const s=rulesetsForProtectionConst(e);!1!==t?await tryUpdateEnabledRulesets(s):await chrome.declarativeNetRequest.updateEnabledRulesets({disableRulesetIds:t?[]:s})};export const toggleAllEnabledRulesets=async e=>{const t=await chrome.declarativeNetRequest.getEnabledRulesets();console.debug("TAER: Enabled rulesets: ",t);const s=(await getAllAvailableStaticRulesets()).filter((e=>!t.includes(e)));console.debug("TAER: Not currently enabled: ",s),!1!==e?await tryUpdateEnabledRulesets(s):await chrome.declarativeNetRequest.updateEnabledRulesets({disableRulesetIds:e?[]:t})};function setDifference(e,t){const s=new Set;for(const l of e)t.has(l)||s.add(l);return s}export const disableStaticRules=async e=>{const t=await simpleStorageGet("mv3DisabledRules")||[],s={};for(const e of t)s[e.ruleset]||(s[e.ruleset]=[]),s[e.ruleset].push(e.ruleId);const l={};for(const t of e)l[t.ruleset]||(l[t.ruleset]=[]),l[t.ruleset].push(t.ruleId);for(const e in l){const t=new Set(s[e]||[]),r=new Set(l[e]),a=Array.from(setDifference(t,r)),o=Array.from(r);try{await chrome.declarativeNetRequest.updateStaticRules({disableRuleIds:o,enableRuleIds:a,rulesetId:e}),console.debug("DSR: Disabled rules: ",{ruleset:e,ruleIds:o,existingDisabledIdsToEnable:a})}catch(t){const s=chrome.runtime.lastError;console.error("DSR: Error disabling rules: ",{ruleset:e,ruleIds:o,err:t,runtimeError:s})}}await simpleStorageSet({mv3DisabledRules:e})};const showRulesetErrorPage=async(e,t=!1)=>{let s="Firefox"===TARGET_BROWSER?"moz-extension://":"chrome-extension://";const l=e.map((e=>e.replace("mbgc.mv3.",""))).join(","),r=s+chrome.i18n.getMessage("@@extension_id")+`/app/eventpages/ruleset-error.html?disabledRulesets=${l}\n        &isBrowserError=${t}`;console.debug("RULESET: Ruleset error page url: ",r),await isRulesetErrorPageOpen()||chrome.tabs.create({url:r,active:!0},(e=>{console.debug("RULESET: Ruleset error page created",e)}))},getAllAvailableStaticRulesets=()=>{const e=chrome.runtime.getManifest().declarative_net_request.rule_resources.map((e=>e.id));return console.debug("GASR: All rulesets: ",e),e},rulesetsForProtectionConst=e=>{let t=null;switch(e){case MV3_PROTECTION_ADS:t=["mbgc.mv3.ads","mbgc.mv3.easylist","mbgc.mv3.easyprivacy","mbgc.arw"];break;case MV3_PROTECTION_MALWARE:t=["mbgc.mv3.malware"];break;default:t=[]}const s=getAllAvailableStaticRulesets(),l=[];for(const e of s)t.find((t=>e.startsWith(t)))&&l.push(e);return console.debug("RFPC: Affected rulesets: ",{rulesetPatterns:t,protectionConst:e,affected:l}),l},isRulesetErrorPageOpen=async()=>{const e=await chrome.tabs.query({currentWindow:!0});for(const t of e)if(t.url.includes("/ruleset-error.html"))return!0;return!1};