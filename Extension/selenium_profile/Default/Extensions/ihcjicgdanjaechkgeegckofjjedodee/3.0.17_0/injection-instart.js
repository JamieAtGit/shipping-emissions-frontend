!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},t=(new e.Error).stack;t&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[t]="b707c320-9de7-4a81-b518-a92b77304a75",e._sentryDebugIdIdentifier="sentry-dbid-b707c320-9de7-4a81-b518-a92b77304a75")}catch(e){}}();var _global="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};_global.SENTRY_RELEASE={id:"9cc321247f9fdefd9741f3bea628958eadeba2f6"},(()=>{var e={6136:(e,t,o)=>{"use strict";o.r(t),o.d(t,{URL:()=>s,chrome:()=>r,indexedDB:()=>i,performance:()=>d});const n="undefined"!=typeof window?window:self,r=n.chrome||n.browser||browser;let i;try{i=indexedDB||n.indexedDB}catch(e){console.log(`Error initializing indexedDB: ${e.message}`)}const d=performance||n.performance,s=URL||n.URL}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,o),i.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n=new URLSearchParams(document.currentScript.src.split("?")[1]).get("extId");console.debug("INS: Instart scanner loaded into "+window.location.href+" by "+n),function(){function e(e){if(document.currentScript&&document.currentScript.textContent){let t=document.currentScript.textContent,o=["Instart","instart","INSTART","I10C","I11C","I12C","IXC_353_1119062411120848"];for(let n of o)if(t.includes(n))throw new Error("Instart "+e+" Logic")}}function t(t,o){console.debug("INS: "+o+" hooked for "+window.location.href);let n=t[o];Object.defineProperty(t,o,{get:function(){return e(o),n},set:function(t){e(o),n=t}})}function r(e,r){if(console.debug("INS: Sending an is-whitelisted request about "+r),console.debug("INS: Extension ID "+n),window.chrome||window.browser||"undefined"!=typeof browser){const{chrome:i}=o(6136);i.runtime.sendMessage(n,{type:"isInstartWhitelisted",parameters:{href:window.location.href,prop:r}},(o=>{o&&o.isWhitelisted?console.debug("INS: "+r+" is whitelisted for "+window.location.href):(i.runtime.lastError&&console.error("INS: Failed with is-whitelisted request for "+r+": "+i.runtime.lastError.message),t(e,r))}))}else{const e={href:window.location.href,prop:r};window.postMessage({type:"isInstartWhitelisted",parameters:JSON.stringify(e)},`${window.location.protocol}//${window.location.host}`)}}r(window,"INSTART"),r(window,"INSTART_TARGET_NAME"),r(window,"I10C"),r(window,"I11C"),r(window,"I12C"),r(window,"IXC_353_1119062411120848");let i=window.setTimeout;window.setTimeout=function(){return e("Timeout"),i.apply(window,arguments)};let d=window.setInterval;window.setInterval=function(){return e("Interval"),d.apply(window,arguments)},window.addEventListener("message",(e=>{if(!e.origin)return;if(e.origin!==window.location.origin)return;const o=new URL(e.origin).host;if("isInstartWhitelistedResponse"===e.data.type&&o===window.location.host){const o=JSON.parse(e.data.parameters);!1===o.isWhitelisted&&t(window,o.property)}}))}()})();
//# sourceMappingURL=injection-instart.js.map